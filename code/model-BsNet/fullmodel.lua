function loadfull(ranges)
-- data: N*1*patch*dim
local sp = nn.SplitTable(-1)

local p = nn.ParallelTable()
p:add(model1)
p:add(model2)
p:add(model3)
p:add(model4)
p:add(model5)
-- p:add(model6)

local sj1 = nn.Sequential()
sj1:add(nn.NarrowTable(ranges[1][1], ranges[1][2]-ranges[1][1]+1))
sj1:add(nn.JoinTable(4))
local sj2 = nn.Sequential()
sj2:add(nn.NarrowTable(ranges[2][1], ranges[2][2]-ranges[2][1]+1))
sj2:add(nn.JoinTable(4))
local sj3 = nn.Sequential()
sj3:add(nn.NarrowTable(ranges[3][1], ranges[3][2]-ranges[3][1]+1))
sj3:add(nn.JoinTable(4))
local sj4 = nn.Sequential()
sj4:add(nn.NarrowTable(ranges[4][1], ranges[4][2]-ranges[4][1]+1))
sj4:add(nn.JoinTable(4))
local sj5 = nn.Sequential()
sj5:add(nn.NarrowTable(ranges[5][1], ranges[5][2]-ranges[5][1]+1))
sj5:add(nn.JoinTable(4))
-- local sj6 = nn.Sequential()
-- sj6:add(nn.NarrowTable(ranges[6][1], ranges[6][2]-ranges[6][1]+1))
-- sj6:add(nn.JoinTable(4))

local c = nn.ConcatTable()
c:add(sj1)
c:add(sj2)
c:add(sj3)
c:add(sj4)
c:add(sj5)
-- c:add(sj6)

local model = nn.Sequential()
model:add(sp)
model:add(c)
model:add(p)
model:add(nn.JoinTable(2))
model:add(nn.Tanh())
model:add(model7)

	return model
end -- end of func.